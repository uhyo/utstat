// Generated by CoffeeScript 1.7.1
(function() {
  var Builder, fs, jade, path;

  fs = require('fs');

  path = require('path');

  jade = require('jade');

  Builder = (function() {
    function Builder(config, dir) {
      this.config = config;
      this.dir = dir;
    }

    Builder.prototype.build = function(callback) {
      return this.findTop((function(_this) {
        return function(dirpath, sitecontent) {
          var e, siteobj;
          try {
            return siteobj = JSON.parse(sitecontent);
          } catch (_error) {
            e = _error;
            console.error("Could not parse " + (path.join(dirpath, _this.config.site_file)));
            throw e;
          } finally {
            _this.registerSite(dirpath, siteobj);
          }
        };
      })(this));
    };

    Builder.prototype.findTop = function(callback) {
      var _find;
      _find = (function(_this) {
        return function(dir) {
          var filepath;
          filepath = path.join(dir, _this.config.site_file);
          return fs.readFile(filepath, {
            encoding: _this.config.encoding
          }, function(err, data) {
            if (err == null) {
              return callback(dir, data);
            } else if (dir !== "/") {
              return _find(path.join(dir, ".."));
            } else {
              throw new Error("Could not find " + _this.config.site_file);
            }
          });
        };
      })(this);
      return _find(path.normalize(this.dir));
    };

    Builder.prototype.ensureDir = function(dir, callback) {
      return fs.stat(dir, (function(_this) {
        return function(err, stat) {
          if (err != null) {
            return fs.mkdir(dir, 0x1ed, function(err) {
              if (err != null) {
                console.error("Could not make directory " + dir);
                return callback(err);
              } else {
                return callback(null);
              }
            });
          } else {
            if (stat.isDirectory()) {
              return callback(null);
            } else {
              console.error("" + dir + " is not directory.");
              return callback(new Error("" + dir + " is not directory."));
            }
          }
        };
      })(this));
    };

    Builder.prototype.registerSite = function(sitedir, siteobj) {
      var currentState, outdir, output;
      this.siteobj = siteobj;
      output = siteobj.output;
      if (output == null) {
        throw new Error("No output field.");
      }
      outdir = path.join(sitedir, output);
      currentState = {};

      /*
       * renderer: テンプレートの関数
       *
       *
       */
      return this.directory(sitedir, outdir, currentState);
    };

    Builder.prototype.directory = function(indir, outdir, currentState, callback) {
      return this.ensureDir(outdir, (function(_this) {
        return function(err) {
          var indexfile, nextStep;
          if (err != null) {
            throw err;
          }
          indexfile = path.join(indir, _this.config.index_file);
          fs.readFile(indexfile, {
            encoding: _this.config.encoding
          }, function(err, data) {
            var e, indexobj, templatefile;
            if (err == null) {
              try {
                return indexobj = JSON.parse(data);
              } catch (_error) {
                e = _error;
                console.error("Error reading " + indexfile);
                throw e;
              } finally {
                currentState = Object.create(currentState);
                if (indexobj.template != null) {
                  templatefile = path.join(indir, indexobj.template);
                  fs.readFile(templatefile, {
                    encoding: _this.config.encoding
                  }, function(err, data) {
                    if (err != null) {
                      console.error("Error processing " + indexfile);
                      throw err;
                    }
                    currentState.renderer = jade.compile(data, {
                      filename: templatefile,
                      pretty: true,
                      self: false,
                      debug: false,
                      compileDebug: false
                    });
                    return nextStep();
                  });
                }
              }
            } else {
              return nextStep();
            }
          });
          return nextStep = function() {
            return fs.readdir(indir, function(err, files) {
              var index, _onefile;
              if (err) {
                throw err;
              }
              index = 0;
              _onefile = function(index) {
                var filename, filepath, outpath, result;
                if (index >= files.length) {
                  if (callback != null) {
                    callback();
                  }
                  return;
                }
                filename = files[index];
                filepath = path.join(indir, filename);
                result = filename.match(/^(.*)\.jade$/);
                if (result != null) {
                  outpath = path.join(outdir, "" + result[1] + "." + _this.config.extension);
                  return jade.renderFile(filepath, {
                    filename: filepath,
                    pretty: true
                  }, function(err, html) {
                    var renderresult;
                    if (err != null) {
                      console.error("Error rendering " + filepath);
                      throw err;
                    }
                    if ("function" !== typeof currentState.renderer) {
                      console.error("Error processing " + filepath);
                      throw new Error("No renderer is set.");
                    }
                    renderresult = currentState.renderer({
                      content: html
                    });
                    return fs.writeFile(outpath, renderresult, {
                      encoding: _this.config.encoding
                    }, function(err) {
                      if (err != null) {
                        console.error("Error processing " + filepath);
                        throw err;
                      }
                      return process.nextTick(function() {
                        return _onefile(index + 1);
                      });
                    });
                  });
                } else {
                  return fs.stat(filename, function(err, stat) {
                    if (err != null) {
                      return _onefile(index + 1);
                    } else {
                      if (stat.isDirectory()) {
                        return _this.directory(filepath, path.join(outdir, filename), currentState, function() {
                          return _onefile(index + 1);
                        });
                      } else {
                        return _onefile(index + 1);
                      }
                    }
                  });
                }
              };
              return _onefile(0);
            });
          };
        };
      })(this));
    };

    return Builder;

  })();

  exports.Builder = Builder;

}).call(this);
