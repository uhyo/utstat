// Generated by CoffeeScript 1.7.1
(function() {
  var Builder, fs, jade, path;

  fs = require('fs');

  path = require('path');

  jade = require('jade');

  Builder = (function() {
    function Builder(config, dir) {
      this.config = config;
      this.dir = dir;
    }

    Builder.prototype.build = function(callback) {
      return this.findTop((function(_this) {
        return function(dirpath, sitecontent) {
          var e, siteobj;
          try {
            return siteobj = JSON.parse(sitecontent);
          } catch (_error) {
            e = _error;
            console.error("Could not parse " + (path.join(dirpath, _this.config.site_file)));
            throw e;
          } finally {
            _this.registerSite(dirpath, siteobj);
          }
        };
      })(this));
    };

    Builder.prototype.findTop = function(callback) {
      var _find;
      _find = (function(_this) {
        return function(dir) {
          var filepath;
          filepath = path.join(dir, _this.config.site_file);
          return fs.readFile(filepath, {
            encoding: _this.config.encoding
          }, function(err, data) {
            if (err == null) {
              return callback(dir, data);
            } else if (dir !== "/") {
              return _find(path.join(dir, ".."));
            } else {
              throw new Error("Could not find " + _this.config.site_file);
            }
          });
        };
      })(this);
      return _find(path.normalize(this.dir));
    };

    Builder.prototype.ensureDir = function(dir, callback) {
      return fs.stat(dir, (function(_this) {
        return function(err, stat) {
          if (err != null) {
            return fs.mkdir(dir, 0x1ed, function(err) {
              if (err != null) {
                console.error("Could not make directory " + dir);
                return callback(err);
              } else {
                return callback(null);
              }
            });
          } else {
            if (stat.isDirectory()) {
              return callback(null);
            } else {
              console.error("" + dir + " is not directory.");
              return callback(new Error("" + dir + " is not directory."));
            }
          }
        };
      })(this));
    };

    Builder.prototype.registerSite = function(sitedir, siteobj) {
      var currentState, dependpath, output;
      this.sitedir = sitedir;
      this.siteobj = siteobj;
      output = siteobj.output;
      if (output == null) {
        throw new Error("No output field.");
      }
      this.outdir = path.resolve(sitedir, output);
      currentState = {};

      /*
       * frameRenderer: テンプレートの関数
       * renderer: レンダリングする関数
       *
       */
      currentState.renderer = (function(_this) {
        return function(filepath, outdir, currentState, callback) {
          var ext, res;
          ext = path.extname(filepath);
          if (ext === ".jade") {
            res = path.basename(filepath, ".jade");
            return _this.renderFile(filepath, path.join(outdir, res + _this.config.extension), currentState, callback);
          } else {
            return callback();
          }
        };
      })(this);
      dependpath = path.join(sitedir, this.config.dependencies_file);

      /*
       * files: {filepath: mtime}
       * depends: {from: [to]}
       *
       */
      this.newtable = {};
      return fs.readFile(dependpath, {
        encoding: this.config.encoding
      }, (function(_this) {
        return function(err, data) {
          var e;
          if (err != null) {
            _this.dependencies = {
              files: {},
              depends: {}
            };
          } else {
            try {
              _this.dependencies = JSON.parse(data);
            } catch (_error) {
              e = _error;
              console.error("" + dependpath + " may be broken. Remove the file to build full site.");
              throw e;
            }
          }
          return _this.directory(sitedir, ".", currentState, function() {
            return fs.writeFile(dependpath, JSON.stringify(_this.dependencies), {
              encoding: _this.config.encoding
            }, function(err) {
              if (err != null) {
                console.error("Error writing " + dependpath);
                throw err;
              }
            });
          });
        };
      })(this));
    };

    Builder.prototype.directory = function(indir, relativedir, currentState, callback) {
      var odir;
      odir = path.join(this.outdir, relativedir);
      return this.ensureDir(odir, (function(_this) {
        return function(err) {
          var indexfile, nextStep, nextStep2;
          if (err != null) {
            throw err;
          }
          indexfile = path.join(indir, _this.config.index_file);
          fs.readFile(indexfile, {
            encoding: _this.config.encoding
          }, function(err, data) {
            var e, indexobj, templatefile;
            if (err == null) {
              try {
                return indexobj = JSON.parse(data);
              } catch (_error) {
                e = _error;
                console.error("Error reading " + indexfile);
                throw e;
              } finally {
                currentState = Object.create(currentState);
                if (indexobj.template != null) {
                  templatefile = path.join(indir, indexobj.template);
                  fs.readFile(templatefile, {
                    encoding: _this.config.encoding
                  }, function(err, data) {
                    if (err != null) {
                      console.error("Error processing " + indexfile);
                      throw err;
                    }
                    currentState.frameRenderer = jade.compile(data, {
                      filename: templatefile,
                      pretty: true,
                      self: false,
                      debug: false,
                      compileDebug: false
                    });
                    return nextStep(indexobj);
                  });
                } else {
                  nextStep(indexobj);
                }
              }
            } else {
              return nextStep(null);
            }
          });
          nextStep = function(indexobj) {
            var rendererfile, rendererobj;
            if (indexobj != null ? indexobj.renderer : void 0) {
              rendererfile = require(path.join(indir, indexobj.renderer));
              rendererobj = rendererfile.getRenderer(_this);
              currentState.renderer = rendererobj.render;
            }
            return nextStep2();
          };
          return nextStep2 = function() {
            return fs.readdir(indir, function(err, files) {
              var index, _onefile;
              if (err) {
                throw err;
              }
              index = 0;
              _onefile = function(index) {
                var filename, filepath, relpath;
                if (index >= files.length) {
                  if (callback != null) {
                    callback();
                  }
                  return;
                }
                filename = files[index];
                filepath = path.join(indir, filename);
                relpath = path.join(relativedir, filename);
                return _this.isNew(filepath, relpath, function(state, isdir) {
                  if (isdir) {
                    _this.directory(filepath, relpath, currentState, function() {
                      return _onefile(index + 1);
                    });
                    return;
                  }
                  if (state === false) {
                    _onefile(index + 1);
                    return;
                  }
                  return currentState.renderer(filepath, odir, currentState, function() {
                    return process.nextTick(function() {
                      return _onefile(index + 1);
                    });
                  });
                });
              };
              return _onefile(0);
            });
          };
        };
      })(this));
    };

    Builder.prototype.isNew = function(filepath, relpath, callback) {
      if (this.newtable[relpath] != null) {
        callback(this.newtable[relpath]);
        return;
      }
      return fs.stat(filepath, (function(_this) {
        return function(err, stat) {
          var files, some, _check;
          if (err != null) {
            _this.newtable[relpath] = false;
            callback(false);
            return;
          }
          if (stat.isDirectory()) {
            callback(true, true);
            return;
          }
          if ((_this.dependencies.files[relpath] == null) || _this.dependencies.files[relpath] < stat.mtime.getTime()) {
            _this.dependencies.files[relpath] = stat.mtime.getTime();
            _this.newtable[relpath] = true;
            callback(true);
            return;
          }
          _this.newtable[relpath] = false;
          files = _this.dependencies.depends[relpath];
          if (!Array.isArray(files)) {
            callback(false);
            return;
          }
          some = false;
          _check = function(index) {
            var dfilepath, realpath;
            if (index >= files.length) {
              if (some) {
                _this.newtable[relpath] = true;
                callback(true);
              } else {
                callback(false);
              }
              return;
            }
            dfilepath = files[index];
            realpath = path.resolve(_this.sitedir, dfilepath);
            return _this.isNew(realpath, dfilepath, function(state) {
              some || (some = state);
              return _check(index + 1);
            });
          };
          return _check(0);
        };
      })(this));
    };

    Builder.prototype.renderFile = function(filepath, outpath, currentState, local, callback) {
      var dir, opt;
      if ((callback == null) && "function" === typeof local) {
        callback = local;
        local = {};
      }
      dir = path.dirname(filepath);
      opt = Object.create(local);
      opt.filename = filepath;
      opt.pretty = true;
      return jade.renderFile(filepath, opt, (function(_this) {
        return function(err, html) {
          var renderresult;
          if (err != null) {
            console.error("Error rendering " + filepath);
            throw err;
          }
          if ("function" !== typeof (currentState != null ? currentState.frameRenderer : void 0)) {
            console.error("Error processing " + filepath);
            throw new Error("No renderer is set.");
          }
          renderresult = currentState.frameRenderer({
            content: html
          });
          return fs.writeFile(outpath, renderresult, {
            encoding: _this.config.encoding
          }, function(err) {
            if (err != null) {
              console.error("Error processing " + filepath);
              throw err;
            }
            return callback();
          });
        };
      })(this));
    };

    return Builder;

  })();

  exports.Builder = Builder;

}).call(this);
