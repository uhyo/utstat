// Generated by CoffeeScript 1.7.1
(function() {
  var Builder, State, ect, fs, jade, minimatch, path, unique,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  jade = require('jade');

  ect = require('ect');

  minimatch = require('minimatch');

  State = (function() {

    /*
     * frameRenderer: テンプレートの関数
     * middleRenderer: 間にはさむテンプレートの関数
     * renderer: レンダリングする関数
     * defaultDependencies: デフォルトで依存する
     * dir: 現在処理しているディレクトリ（相対パス）
     * ignores: 無視する
     */
    function State(builder) {
      this.builder = builder;
      this.frameRenderer = null;
      this.renderer = null;
      this.middleRenderer = [];
      this.defaultDependencies = [];
      this.ignores = [];
      this.dir = null;
    }

    State.prototype.clone = function() {
      var res;
      res = new State(this.builder);
      res.frameRenderer = this.frameRenderer;
      res.renderer = this.renderer;
      res.middleRenderer = this.middleRenderer.concat([]);
      res.defaultDependencies = this.defaultDependencies.concat([]);
      res.ignores = this.ignores.concat([]);
      res.dir = this.dir;
      return res;
    };

    State.prototype.addDependency = function(paths) {
      var p, _i, _len;
      if (!Array.isArray(paths)) {
        paths = [paths];
      }
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        p = paths[_i];
        this.defaultDependencies.push(path.relative(this.builder.sitedir, path.resolve(this.builder.sitedir, this.dir, p)));
      }
    };

    State.prototype.addMiddleRenderer = function(func) {
      this.middleRenderer.push(func);
    };

    State.prototype.addMiddleTemplate = function(filepath, callback) {
      var templatefile;
      templatefile = path.resolve(this.builder.sitedir, this.dir, filepath);
      this.builder.loadTemplate(templatefile, (function(_this) {
        return function(err, func) {
          if (err != null) {
            callback(err);
            return;
          }
          _this.addDependency(filepath);
          _this.addMiddleRenderer(func);
          return callback(null);
        };
      })(this));
    };

    State.prototype.addIgnores = function(patterns) {
      var p, _i, _len;
      if (!Array.isArray(patterns)) {
        patterns = [patterns];
      }
      for (_i = 0, _len = patterns.length; _i < _len; _i++) {
        p = patterns[_i];
        this.ignores.push(p);
      }
    };

    State.prototype.matchIgnores = function(path) {
      return this.ignores.some(function(p) {
        return minimatch(path, p, {
          matchBase: true
        });
      });
    };

    return State;

  })();

  Builder = (function() {
    function Builder(config, dir) {
      this.config = config;
      this.dir = dir;
      this.templateCache = {};
    }

    Builder.prototype.build = function(callback) {
      return this.findTop((function(_this) {
        return function(dirpath, sitecontent) {
          var e, siteobj;
          try {
            return siteobj = JSON.parse(sitecontent);
          } catch (_error) {
            e = _error;
            console.error("Could not parse " + (path.join(dirpath, _this.config.site_file)));
            throw e;
          } finally {
            _this.registerSite(dirpath, siteobj);
          }
        };
      })(this));
    };

    Builder.prototype.findTop = function(callback) {
      var _find;
      _find = (function(_this) {
        return function(dir) {
          var filepath;
          filepath = path.join(dir, _this.config.site_file);
          return fs.readFile(filepath, {
            encoding: _this.config.encoding
          }, function(err, data) {
            if (err == null) {
              return callback(dir, data);
            } else if (dir !== "/") {
              return _find(path.join(dir, ".."));
            } else {
              throw new Error("Could not find " + _this.config.site_file);
            }
          });
        };
      })(this);
      return _find(path.normalize(this.dir));
    };

    Builder.prototype.ensureDir = function(dir, callback) {
      return fs.stat(dir, (function(_this) {
        return function(err, stat) {
          if (err != null) {
            return fs.mkdir(dir, 0x1ed, function(err) {
              if (err != null) {
                console.error("Could not make directory " + dir);
                return callback(err);
              } else {
                return callback(null);
              }
            });
          } else {
            if (stat.isDirectory()) {
              return callback(null);
            } else {
              console.error("" + dir + " is not directory.");
              return callback(new Error("" + dir + " is not directory."));
            }
          }
        };
      })(this));
    };

    Builder.prototype.registerSite = function(sitedir, siteobj) {
      var currentState, dependpath, output;
      if (this.config.log_level >= 2) {
        console.log("stating from", sitedir);
      }
      this.sitedir = sitedir;
      this.siteobj = siteobj;
      output = siteobj.output;
      if (output == null) {
        throw new Error("No output field.");
      }
      this.outdir = path.resolve(sitedir, output);
      currentState = new State(this);
      currentState.renderer = (function(_this) {
        return function(filepath, currentState, callback) {
          var ext, res;
          ext = path.extname(filepath);
          if (ext === ".jade" || ext === ".ect") {
            res = path.basename(filepath, ext);
            return _this.renderFile(filepath, res + _this.config.extension, currentState, callback);
          } else if (ext === ".html" || ext === ".htm") {
            return _this.keepFile(filepath, currentState, callback);
          } else {
            return callback();
          }
        };
      })(this);
      currentState.middleRenderer = [];
      currentState.defaultDependencies = [];
      dependpath = path.join(sitedir, this.config.dependencies_file);

      /*
       * files: {filepath: mtime}
       * depends: {from: [to]}
       *
       */
      this.newtable = {};
      return fs.readFile(dependpath, {
        encoding: this.config.encoding
      }, (function(_this) {
        return function(err, data) {
          var e;
          if (err != null) {
            _this.dependencies = {
              files: {},
              depends: {}
            };
          } else {
            try {
              _this.dependencies = JSON.parse(data);
            } catch (_error) {
              e = _error;
              console.error("" + dependpath + " may be broken. Remove the file to build full site.");
              throw e;
            }
          }
          return _this.directory(sitedir, ".", currentState, function() {
            return fs.writeFile(dependpath, JSON.stringify(_this.dependencies), {
              encoding: _this.config.encoding
            }, function(err) {
              if (err != null) {
                console.error("Error writing " + dependpath);
                throw err;
              }
            });
          });
        };
      })(this));
    };

    Builder.prototype.directory = function(indir, relativedir, currentState, callback) {
      var odir;
      if ((this.config.parseTop != null) && /(?:^|\/)\.\.(?:$|\/)/.test(path.relative(this.config.parseTop, indir))) {
        callback();
        return;
      }
      if (this.config.log_level >= 2) {
        console.log("entering directory", indir);
      }
      odir = path.join(this.outdir, relativedir);
      return this.ensureDir(odir, (function(_this) {
        return function(err) {
          var indexfile, nextStep, nextStep2;
          if (err != null) {
            throw err;
          }
          indexfile = path.join(indir, _this.config.index_file);
          fs.readFile(indexfile, {
            encoding: _this.config.encoding
          }, function(err, data) {
            var e, indexobj, templatefile;
            if (err == null) {
              try {
                return indexobj = JSON.parse(data);
              } catch (_error) {
                e = _error;
                console.error("Error reading " + indexfile);
                throw e;
              } finally {
                currentState = currentState.clone();
                currentState.dir = relativedir;
                currentState.addDependency(_this.config.index_file);
                if (indexobj.template != null) {
                  templatefile = path.join(indir, indexobj.template);
                  _this.loadTemplate(templatefile, function(err, func) {
                    currentState.addDependency(indexobj.template);
                    currentState.frameRenderer = func;
                    return nextStep(indexobj);
                  });
                } else {
                  nextStep(indexobj);
                }
              }
            } else {
              console.warn("warn: Coundn't open " + indexfile);
              return nextStep(null);
            }
          });
          nextStep = function(indexobj) {
            var mids, rendererfile, rendererobj, rendererpath, _onetemp, _ref;
            if (indexobj != null ? indexobj.renderer : void 0) {
              switch (typeof indexobj.renderer) {
                case "string":
                  rendererpath = path.join(indir, indexobj.renderer);
                  rendererfile = require(rendererpath);
                  rendererobj = rendererfile.getRenderer(_this);
                  if ("function" === typeof rendererobj.render) {
                    currentState.renderer = rendererobj.render;
                  }
                  currentState.addDependency(indexobj.renderer);
                  if ("function" === typeof rendererobj.afterRender) {
                    currentState.addMiddleRenderer((function(func) {
                      return function(obj) {
                        return func(obj.content, obj.page);
                      };
                    })(rendererobj.afterRender));
                  }
                  break;
                case "object":
                  switch (indexobj.renderer.type) {
                    case "static":
                      currentState.renderer = (function(exts, builder) {
                        return function(filepath, currentState, callback) {
                          var ext;
                          ext = path.extname(filepath);
                          if (exts === "*" || exts.indexOf(ext) >= 0) {
                            return builder.keepFile(filepath, currentState, callback);
                          } else {
                            return callback();
                          }
                        };
                      })(indexobj.renderer.exts, _this);
                      break;
                    case "normal":
                    case "jade":
                    case "ect":
                      currentState.renderer = (function(staticExts) {
                        return function(filepath, currentState, callback) {
                          var ext, res;
                          ext = path.extname(filepath);
                          if (ext === ".jade" || ext === ".ect") {
                            res = path.basename(filepath, ext);
                            return _this.renderFile(filepath, res + _this.config.extension, currentState, callback);
                          } else if (__indexOf.call(staticExts, ext) >= 0) {
                            return _this.keepFile(filepath, currentState, callback);
                          } else {
                            return callback();
                          }
                        };
                      })((_ref = indexobj.renderer["static"]) != null ? _ref : [".html", ".htm"]);
                      break;
                    case "none":
                      callback();
                      return;
                  }
              }
            }
            if ((indexobj != null ? indexobj.ignores : void 0) != null) {
              currentState.addIgnores(indexobj.ignores);
            }
            if ((indexobj != null ? indexobj["middle-template"] : void 0) != null) {
              mids = indexobj["middle-template"];
              if (!Array.isArray(mids)) {
                mids = [mids];
              }
              _onetemp = function(index) {
                if (index >= mids.length) {
                  nextStep2(indexobj);
                  return;
                }
                return currentState.addMiddleTemplate(mids[index], function(err) {
                  if (err != null) {
                    console.error("Error processing " + indexfile);
                    throw err;
                  }
                  return _onetemp(index + 1);
                });
              };
              return _onetemp(0);
            } else {
              return nextStep2(indexobj);
            }
          };
          return nextStep2 = function() {
            return fs.readdir(indir, function(err, files) {
              var _onefile;
              if (err) {
                throw err;
              }
              _onefile = function(index) {
                var deps, filename, filepath, relpath, _ref;
                if (index >= files.length) {
                  if (callback != null) {
                    callback();
                  }
                  return;
                }
                filename = files[index];
                filepath = path.join(indir, filename);
                relpath = path.join(relativedir, filename);
                if (relpath === _this.config.dependencies_file) {
                  _onefile(index + 1);
                  return;
                }
                if (currentState.matchIgnores(relpath)) {
                  _onefile(index + 1);
                  return;
                }
                deps = (_ref = _this.dependencies.depends[relpath]) != null ? _ref : [];
                _this.dependencies.depends[relpath] = unique(deps.concat(currentState.defaultDependencies));
                return _this.isNew(filepath, relpath, function(state, isdir) {
                  if (isdir) {
                    delete _this.dependencies.depends[relpath];
                    _this.directory(filepath, relpath, currentState, function() {
                      return _onefile(index + 1);
                    });
                    return;
                  }
                  if (state === false) {
                    _onefile(index + 1);
                    return;
                  }
                  if (_this.config.log_level > 0) {
                    console.log("processing " + relpath);
                  }
                  return currentState.renderer(filepath, currentState, function() {
                    return process.nextTick(function() {
                      return _onefile(index + 1);
                    });
                  });
                });
              };
              return _onefile(0);
            });
          };
        };
      })(this));
    };

    Builder.prototype.isNew = function(filepath, relpath, callback) {
      if (this.newtable[relpath] != null) {
        callback(this.newtable[relpath]);
        return;
      }
      return fs.stat(filepath, (function(_this) {
        return function(err, stat) {
          var files, some, _check;
          if (err != null) {
            _this.newtable[relpath] = false;
            callback(false);
            return;
          }
          if (stat.isDirectory()) {
            callback(true, true);
            return;
          }
          if ((_this.dependencies.files[relpath] == null) || _this.dependencies.files[relpath] < stat.mtime.getTime()) {
            _this.dependencies.files[relpath] = stat.mtime.getTime();
            _this.newtable[relpath] = true;
            callback(true);
            return;
          }
          _this.newtable[relpath] = false;
          files = _this.dependencies.depends[relpath];
          if (!Array.isArray(files)) {
            callback(false);
            return;
          }
          some = false;
          _check = function(index) {
            var dfilepath, realpath;
            if (index >= files.length) {
              if (some) {
                _this.newtable[relpath] = true;
                callback(true);
              } else {
                callback(false);
              }
              return;
            }
            dfilepath = files[index];
            realpath = path.resolve(_this.sitedir, dfilepath);
            return _this.isNew(realpath, dfilepath, function(state) {
              some || (some = state);
              return _check(index + 1);
            });
          };
          return _check(0);
        };
      })(this));
    };

    Builder.prototype.loadTemplate = function(templatefile, callback) {
      if (this.templateCache[templatefile] != null) {
        callback(null, this.templateCache[templatefile]);
        return;
      }
      fs.readFile(templatefile, {
        encoding: this.config.encoding
      }, (function(_this) {
        return function(err, data) {
          var ext, func;
          if (err != null) {
            console.error("error reading " + templatefile);
            callback(err, null);
            return;
          }
          ext = path.extname(templatefile);
          if (ext === ".jade") {
            func = jade.compile(data, {
              filename: templatefile,
              pretty: true,
              self: false,
              debug: false,
              compileDebug: false
            });
          } else if (ext === ".ect") {
            func = (function(templatefile) {
              var re;
              re = ect({
                root: path.dirname(templatefile)
              });
              return re.render.bind(re, templatefile);
            })(templatefile);
          }
          _this.templateCache[templatefile] = func;
          return callback(null, func);
        };
      })(this));
    };

    Builder.prototype.keepFile = function(filepath, currentState, callback) {
      var outpath;
      outpath = path.join(this.outdir, currentState.dir, path.basename(filepath));
      return fs.stat(filepath, function(err, stats) {
        var mode, rs, ws;
        if (err != null) {
          throw err;
        }
        mode = stats.mode & parseInt("777", 8);
        rs = fs.createReadStream(filepath);
        rs.on("error", function(err) {
          console.error("Error copying " + filepath + " to " + outpath);
          throw err;
        });
        ws = fs.createWriteStream(outpath, {
          mode: mode
        });
        ws.on("error", function(err) {
          console.error("Error copying " + filepath + " to " + outpath);
          throw err;
        });
        ws.on("close", function() {
          return callback();
        });
        return rs.pipe(ws);
      });
    };

    Builder.prototype.renderFile = function(filepath, outname, currentState, local, callback) {
      var dir, opt, outpath, page, site;
      if ((callback == null) && "function" === typeof local) {
        callback = local;
        local = {};
      }
      dir = path.dirname(filepath);
      page = {
        filepath: path.join(currentState.dir, path.basename(filepath))
      };
      site = {
        name: this.siteobj["site-name"]
      };
      opt = Object.create(local);
      opt.page = page;
      opt.site = site;
      opt.filename = filepath;
      opt.pretty = true;
      outpath = path.join(this.outdir, currentState.dir, outname);
      return this.loadTemplate(filepath, (function(_this) {
        return function(err, func) {
          var content, frs, html, _i;
          try {
            html = func(opt);
          } catch (_error) {
            err = _error;
            console.error("Error rendering " + filepath);
            throw err;
          }
          if ("function" !== typeof (currentState != null ? currentState.frameRenderer : void 0)) {
            console.error("Error processing " + filepath);
            throw new Error("No renderer is set.");
          }
          frs = [currentState.frameRenderer].concat(currentState.middleRenderer);
          content = html;
          for (_i = frs.length - 1; _i >= 0; _i += -1) {
            func = frs[_i];
            opt.content = content;
            content = func(opt);
          }
          return fs.writeFile(outpath, content, {
            encoding: _this.config.encoding
          }, function(err) {
            if (err != null) {
              console.error("Error processing " + filepath);
              throw err;
            }
            return callback();
          });
        };
      })(this));
    };

    Builder.prototype.dependon = function(frompath, topath) {
      var frel, trel;
      frel = path.relative(this.sitedir, frompath);
      trel = path.relative(this.sitedir, topath);
      if (Array.isArray(this.dependencies.depends[frel])) {
        return this.dependencies.depends[frel] = unique(this.dependencies.depends[frel].concat(trel));
      } else {
        return this.dependencies.depends[frel] = [trel];
      }
    };

    return Builder;

  })();

  unique = function(arr) {
    var result, table, value, _i, _len;
    result = [];
    table = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      value = arr[_i];
      if (table[value] == null) {
        table[value] = true;
        result.push(value);
      }
    }
    return result;
  };

  exports.Builder = Builder;

}).call(this);
